A summary of https://www.linkedin.com/learning/learning-rabbitmq

0.1

0.2

1

1.1

1.2 the amqp protocol

1.7 how to install rabbitmq

    linux

    windows
        otp_win64_22.1.exe from https://www.rabbitmq.com/which-erlang.html

            install as run as administrator

            set ERLANG_HOME=C:\Program Files\erl-24.0       // upgraded to 24

        rabbitmq-server-3.8.0.exe from https://www.rabbitmq.com/changelog.html

            install with default  option (no need to run as administrator)

        enable management console

            Run Command Prompt with %ERLANG_HOME%
            cd c:\Program Files\RabbitMQ Server\rabbitmq_server-3.8.0\sbin> rabbitmq-plugins enable rabbitmq_management

        install service
            Start > RabbitMQ (re)install

        start
            net start rabbitmq

        check status
            the console service is ready at http://localhost:15672 (guest / guest)

        stop
            net stop rabbitmq

    mac

    cloud

        amazon

        azure

        cloud foundary

        gcp

        cloudamqp

            go to https://cloudamqp.com

            sign up

            Create a test instance using free plan: Littel Lemur (Free)

            https://customer.cloudamqp.com/instance/#

                Click RabbitMQ Manager

                RabbitMQ 3.8.5, Erlang 22.3.4.12

            https://api.cloudamqp.com/console/e00e2262-3108-49d6-a249-<removed>/details

                amqp url: amqps://wpnhglcx:HpBkG6LqUztKMk4zpDFoJBvO<removed>@hornet.rmq.cloudamqp.com/wpnhglcx

    docker

    kubrenetes

    chef

    puppet

1.8 quiz

durable queue

    mq 재시작 때 queue가 다시 만들어짐.
    그 안에 있던 메시지가 남아 있다는 뜻이 아님. message는 기본적으로 사라지고, 그거 남아 있게 하려면 message도 persistent해야 함.

2 basic usage

2.1 intro

2.2 publish to a rabbitmq exchange

    // fanout exchnage에 메시지 보내기.

    ExploreCalifornia.WebApp.Controllers/BookingController.cs

        using System;
        using System.Collections.Generic;
        using System.Linq;
    +   using System.Text;
        using System.Threading.Tasks;
        using Microsoft.AspNetCore.Http;
        using Microsoft.AspNetCore.Mvc;
    +   using RabbitMQ.Client;

        namespace ExploreCalifornia.WebApp.Controllers
        {
            [Route("api/[controller]")]
            [ApiController]
            public class BookingController : ControllerBase
            {
                [HttpPost]
                [Route("Book")]
                public IActionResult Book()
                {
                    var tourname = Request.Form["tourname"];
                    var name = Request.Form["name"];
                    var email= Request.Form["email"];
                    var needsTransport = Request.Form["transport"] == "on";

    +               var factory = new ConnectionFactory();
    +               factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
    +               var connection = factory.CreateConnection();
    +               var channel = connection.CreateModel();

                    // 3rd parammeter: true = durable exchange
    +               channel.ExchangeDeclare("webappExchange", ExchangeType.Fanout, true);

    +               var message = $"{tourname};{name};{email}";
                    // convert to byte as amqp is a binary protocol.
    +               var bytes = Encoding.UTF8.GetBytes(message);
                    // 2nd: "" = routing key
                    // 3rd: null = no properties
    +               channel.BasicPublish("webappExchange", "", null, bytes);

    +               channel.Close();
    +               connection.Close();

                    return Redirect($"/BookingConfirmed?tourname={tourname}&name={name}&email={email}");
                }

                [HttpPost]
                [Route("Cancel")]
                public IActionResult Cancel()
                {
                    var tourname = Request.Form["tourname"];
                    var name = Request.Form["name"];
                    var email = Request.Form["email"];
                    var cancelReason = Request.Form["reason"];

                    // Send cancel message here

                    return Redirect($"/BookingCanceled?tourname={tourname}&name={name}");
                }
            }
        }

    요약:
        create connection
        create channel
        create fanout exchange
        publish message

2.3 consuming messages

    ExploreCalifornia.EmailService/Program.cs

        using System;
    +   using System.Text;
    +   using RabbitMQ.Client;
    +   using RabbitMQ.Client.Events;

        namespace ExploreCalifornia.EmailService
        {
            class Program
            {
                static void Main(string[] args)
                {
    +               var factory = new ConnectionFactory();
    +               factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
    +               var connection = factory.CreateConnection();
    +               var channel = connection.CreateModel();

                    // emailServiceQueue: queue name
                    // durable = true: MQ restart시 queue를 재생성.
                    // exclusive = false: false이므로 여러 connection이 queue에 접속할 수 있음. 메시지는 round robin으로 전달.
                    // autoDelete = false: false이므로 disconnect 해도 queue 삭제 안 됨.
    +               channel.QueueDeclare("emailServiceQueue", true, false, false);

                    // fanout 사용중이므로 마지말 파라미터 binding key는 사용하지 않는다.
    +               channel.QueueBind("emailServiceQueue", "webappExchange", "");

    +               var consumer = new EventingBasicConsumer(channel);
    +               consumer.Received += (sender, eventArgs) =>
    +               {
    +                   var msg = Encoding.UTF8.GetString(eventArgs.Body);
    +                   Console.WriteLine(msg);
    +               };

    +               channel.BasicConsume("emailServiceQueue", true, consumer);

    +               Console.ReadLine();

    +               channel.Close();
    +               connection.Close();
                }
            }
        }

    요약
        create connection
        create channel
        create a durable, non-exclusive, non-autodelete queue
        bind queue with exchange
        consume

2.4 filter messages with direct exchanges

    다음 예제를 위해 management ui로 webappExchange 삭제.

    ExploreCalifornia.WebApp.Controllers/BookingController.cs

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Threading.Tasks;
        using Microsoft.AspNetCore.Http;
        using Microsoft.AspNetCore.Mvc;
        using RabbitMQ.Client;

        namespace ExploreCalifornia.WebApp.Controllers
        {
            [Route("api/[controller]")]
            [ApiController]
            public class BookingController : ControllerBase
            {
                [HttpPost]
                [Route("Book")]
                public IActionResult Book()
                {
                    var tourname = Request.Form["tourname"];
                    var name = Request.Form["name"];
                    var email= Request.Form["email"];
                    var needsTransport = Request.Form["transport"] == "on";

                    // booking queue
    +               var message = $"{tourname};{name};{email}";
    +               SendMessage("tour.booked", message);

                    return Redirect($"/BookingConfirmed?tourname={tourname}&name={name}&email={email}");
                }

                [HttpPost]
                [Route("Cancel")]
                public IActionResult Cancel()
                {
                    var tourname = Request.Form["tourname"];
                    var name = Request.Form["name"];
                    var email = Request.Form["email"];
                    var cancelReason = Request.Form["reason"];

                    // cancellation queue
    +               var message = $"{tourname};{name};{email};{cancelReason}";
    +               SendMessage("tour.canceled", message);

                    return Redirect($"/BookingCanceled?tourname={tourname}&name={name}");
                }

    +           private void SendMessage(string routingKey, string message)
    +           {
    +               var factory = new ConnectionFactory();
    +               factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
    +               var connection = factory.CreateConnection();
    +               var channel = connection.CreateModel();

    +               var bytes = Encoding.UTF8.GetBytes(message);
                    // properties = null
    +               channel.BasicPublish("webappExchange", routingKey, null, bytes);

    +               channel.Close();
    +               connection.Close();
    +           }
            }
        }

    위 코드가 실행되기 전에 main 함수에서 direct exchange를 먼저 생성하도록 한다.

    ExploreCalifornia.WebApp/Program.cs

        using System;
        using System.Collections.Generic;
        using System.IO;
        using System.Linq;
        using System.Threading.Tasks;
        using Microsoft.AspNetCore;
        using Microsoft.AspNetCore.Hosting;
        using Microsoft.Extensions.Configuration;
        using Microsoft.Extensions.Logging;
    +   using RabbitMQ.Client;

        namespace ExploreCalifornia.WebApp
        {
            public class Program
            {
                public static void Main(string[] args)
                {
    +               var factory = new ConnectionFactory();
    +               factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
    +               var connection = factory.CreateConnection();
    +               var channel = connection.CreateModel();

                    // direct, durable.
    +               channel.ExchangeDeclare("webappExchange", ExchangeType.Direct, true);

    +               channel.Close();
    +               connection.Close();

                    CreateWebHostBuilder(args).Build().Run();
                }

                public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
                    WebHost.CreateDefaultBuilder(args)
                        .UseStartup<Startup>();
            }
        }

    ExploreCalifornia.EmailService/Program.cs

        using System;
        using System.Text;
        using RabbitMQ.Client;
        using RabbitMQ.Client.Events;

        namespace ExploreCalifornia.EmailService
        {
            class Program
            {
                static void Main(string[] args)
                {
                    var factory = new ConnectionFactory();
                    factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
                    var connection = factory.CreateConnection();
                    var channel = connection.CreateModel();

                    channel.QueueDeclare("emailServiceQueue", true, false, false);
    +               channel.QueueBind("emailServiceQueue", "webappExchange", "tour.booked");

                    var consumer = new EventingBasicConsumer(channel);
                    consumer.Received += (sender, eventArgs) =>
                    {
                        var msg = Encoding.UTF8.GetString(eventArgs.Body);
    +                   Console.WriteLine($"{eventArgs.RoutingKey}: {msg}");
                    };

                    channel.BasicConsume("emailServiceQueue", true, consumer);

                    Console.ReadLine();

                    channel.Close();
                    connection.Close();
                }
            }
        }

    tour.book에 도착한 메시지는 읽었지만, tour.cancelled 에 도착한 메시지는 읽지 않는다.

2.5 filter messages with topic exchanges

    use case
        book -> email
        cancel -> email, backoffice

    routing key design for topic exchange
        tour.booked
        tour.cancelled

    binding key design
        queue for email: tour.booked
        queue for backoffice: tour.*    // * 는 임의의 단어 하나, # 는 임의의 단어 여러 개

    위 코드에서 EmailService binding key는 이미 tour.booked 이므로 변경할 것이 없다.

    ExploreCalifornia.WebApp/Program.cs

        using System;
        using System.Collections.Generic;
        using System.IO;
        using System.Linq;
        using System.Threading.Tasks;
        using Microsoft.AspNetCore;
        using Microsoft.AspNetCore.Hosting;
        using Microsoft.Extensions.Configuration;
        using Microsoft.Extensions.Logging;
        using RabbitMQ.Client;

        namespace ExploreCalifornia.WebApp
        {
            public class Program
            {
                public static void Main(string[] args)
                {
                    var factory = new ConnectionFactory();
                    factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
                    var connection = factory.CreateConnection();
                    var channel = connection.CreateModel();

                    // exchange 타입을 Topic으로 바꾸고
    +               channel.ExchangeDeclare("webappExchange", ExchangeType.Topic, true);

                    channel.Close();
                    connection.Close();

                    CreateWebHostBuilder(args).Build().Run();
                }

                public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
                    WebHost.CreateDefaultBuilder(args)
                        .UseStartup<Startup>();
            }
        }

    // "webappExchange" (type: topic) - [binding key: "tour.*"] -> "backOfficeQueue"

    ExploreCalifornia.BackOffice/Program.cs

        using System;
        using System.ComponentModel.DataAnnotations;
        using System.Text;
        using RabbitMQ.Client;
        using RabbitMQ.Client.Events;

        namespace ExploreCalifornia.BackOffice
        {
            class Program
            {
                static void Main(string[] args)
                {
    +               var factory = new ConnectionFactory();
    +               factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
    +               var connection = factory.CreateConnection();
    +               var channel = connection.CreateModel();

    +               channel.QueueDeclare("backOfficeQueue", true, false, false);
                    // tour.* 를 바인딩 키로 하여 booked, cancelled, 두 가지 메시지를 모두 수신한다.
    +               channel.QueueBind("backOfficeQueue", "webappExchange", "tour.*");

    +               var consumer = new EventingBasicConsumer(channel);
    +               consumer.Received += (sender, eventArgs) =>
    +               {
    +                   var msg = Encoding.UTF8.GetString(eventArgs.Body);
    +                   Console.WriteLine($"{eventArgs.RoutingKey}: {msg}");
    +               };

    +               channel.BasicConsume("backOfficeQueue", true, consumer);

    +               Console.ReadLine();

    +               channel.Close();
    +               connection.Close();
                }
            }
        }

2.6 filter messages with headers

    다른 타임의 exchange 테스트를 위해 mgmt ui를 이용해, exhcnage, queue를 모두 삭제.

    use case
        x-match: all 이면, subject: tour AND action: booked 일 때 메시지를 queue로 전달
        x-match: any 이면, subject: tour OR action: booked 일 때 메시지를 queue로 전달

    Note: header exchange는 별로 추천하지 않음. 왠만하면 direct, topic으로 해결하기 바람.

    ExploreCalifornia.WebApp/Program.cs (header exchange 연습)

        using System;
        using System.Collections.Generic;
        using System.IO;
        using System.Linq;
        using System.Threading.Tasks;
        using Microsoft.AspNetCore;
        using Microsoft.AspNetCore.Hosting;
        using Microsoft.Extensions.Configuration;
        using Microsoft.Extensions.Logging;
        using RabbitMQ.Client;

        namespace ExploreCalifornia.WebApp
        {
            public class Program
            {
                public static void Main(string[] args)
                {
                    var factory = new ConnectionFactory();
                    factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
                    var connection = factory.CreateConnection();
                    var channel = connection.CreateModel();

    +               channel.ExchangeDeclare("webappExchange", ExchangeType.Headers, true);

                    channel.Close();
                    connection.Close();

                    CreateWebHostBuilder(args).Build().Run();
                }

                public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
                    WebHost.CreateDefaultBuilder(args)
                        .UseStartup<Startup>();
            }
        }

    ExploreCalifornia.WebApp/Controllers/BookingController.cs (subject, action 두 가지 헤더를 binding 으로 사용)

        // Publisher: routing key 대신 header를 보낸다.

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Text;
        using System.Threading.Tasks;
        using Microsoft.AspNetCore.Http;
        using Microsoft.AspNetCore.Mvc;
        using RabbitMQ.Client;
    +   using RabbitMQ.Client.Framing;

        namespace ExploreCalifornia.WebApp.Controllers
        {
            [Route("api/[controller]")]
            [ApiController]
            public class BookingController : ControllerBase
            {
                [HttpPost]
                [Route("Book")]
                public IActionResult Book()
                {
                    var tourname = Request.Form["tourname"];
                    var name = Request.Form["name"];
                    var email= Request.Form["email"];
                    var needsTransport = Request.Form["transport"] == "on";

                    var message = $"{tourname};{name};{email}";
    +               var headers = new Dictionary<string, object>
    +               {
    +                   {"subject", "tour"},
    +                   {"action", "booked"}
    +               };

    +               SendMessage(headers, message);

                    // 고객이 교통편이 필요한 경우.
    +               if (needsTransport)
    +               {
    +                   var needsTransportHeaders = new Dictionary<string, object>
    +                   {
    +                       {"subject", "transport"},
    +                       {"action", "booked"}
    +                   };

    +                   SendMessage(needsTransportHeaders, message);
    +               }

                    return Redirect($"/BookingConfirmed?tourname={tourname}&name={name}&email={email}");
                }

                [HttpPost]
                [Route("Cancel")]
                public IActionResult Cancel()
                {
                    var tourname = Request.Form["tourname"];
                    var name = Request.Form["name"];
                    var email = Request.Form["email"];
                    var cancelReason = Request.Form["reason"];

                    var message = $"{tourname};{name};{email};{cancelReason}";
    +               var headers = new Dictionary<string, object>
    +               {
    +                   {"subject", "tour"},
    +                   {"action", "canceled"}
    +               };

    +               SendMessage(headers, message);

                    return Redirect($"/BookingCanceled?tourname={tourname}&name={name}");
                }

    +           private void SendMessage(IDictionary<string, object> headers, string message)
                {
                    var factory = new ConnectionFactory();
                    factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
                    var connection = factory.CreateConnection();
                    var channel = connection.CreateModel();

                    var bytes = Encoding.UTF8.GetBytes(message);
    +               var props = new BasicProperties();
    +               props.Headers = headers;
    +               channel.BasicPublish("webappExchange", "", props, bytes);

                    channel.Close();
                    connection.Close();
                }
            }
        }

    ExploreCalifornia.EmailService/Program.cs (x-match: all 연습)

        using System;
    +   using System.Collections.Generic;
        using System.Text;
        using RabbitMQ.Client;
        using RabbitMQ.Client.Events;

        namespace ExploreCalifornia.EmailService
        {
            class Program
            {
                static void Main(string[] args)
                {
                    var factory = new ConnectionFactory();
                    factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
                    var connection = factory.CreateConnection();
                    var channel = connection.CreateModel();

                    channel.QueueDeclare("emailServiceQueue", true, false, false);

                    // x-match: all 이면, subject: tour AND action: booked 일 때 메시지를 queue로 전달
    +               var headers = new Dictionary<string, object>
    +               {
    +                   {"subject", "tour"},
    +                   {"action", "booked"},
    +                   {"x-match", "all"}
    +               };
    +               channel.QueueBind("emailServiceQueue", "webappExchange", "", headers);

                    var consumer = new EventingBasicConsumer(channel);
                    consumer.Received += (sender, eventArgs) =>
                    {
                        var msg = Encoding.UTF8.GetString(eventArgs.Body);
    +                   var subject = Encoding.UTF8.GetString(eventArgs.BasicProperties.Headers["subject"] as byte[]);
    +                   var action = Encoding.UTF8.GetString(eventArgs.BasicProperties.Headers["action"] as byte[]);

    +                   Console.WriteLine($"{subject}.{action}: {msg}");
                    };

                    channel.BasicConsume("emailServiceQueue", true, consumer);

                    Console.ReadLine();

                    channel.Close();
                    connection.Close();
                }
            }
        }

    ExploreCalifornia.BackOffice\Program.cs (x-match: any 연습)

        using System;
    +   using System.Collections.Generic;
        using System.ComponentModel.DataAnnotations;
        using System.Text;
        using RabbitMQ.Client;
        using RabbitMQ.Client.Events;

        namespace ExploreCalifornia.BackOffice
        {
            class Program
            {
                static void Main(string[] args)
                {
                    var factory = new ConnectionFactory();
                    factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
                    var connection = factory.CreateConnection();
                    var channel = connection.CreateModel();

                    channel.QueueDeclare("backOfficeQueue", true, false, false);

    +               var headers = new Dictionary<string, object>
    +               {
    +                   {"subject", "tour"},
    +                   {"action", "booked"},
    +                   {"x-match", "any"}
    +               };
    +               channel.QueueBind("backOfficeQueue", "webappExchange", "", headers);

                    var consumer = new EventingBasicConsumer(channel);
                    consumer.Received += (sender, eventArgs) =>
                    {
                        var msg = Encoding.UTF8.GetString(eventArgs.Body);
    +                   var subject = Encoding.UTF8.GetString(eventArgs.BasicProperties.Headers["subject"] as byte[]);
    +                   var action = Encoding.UTF8.GetString(eventArgs.BasicProperties.Headers["action"] as byte[]);

    +                   Console.WriteLine($"{subject}.{action}: {msg}");
                    };

                    channel.BasicConsume("backOfficeQueue", true, consumer);

                    Console.ReadLine();

                    channel.Close();
                    connection.Close();
                }
            }
        }

2.7 challenge: a simple chat appliction

2.8 solution: a simple chat appliction

    mgmt ui에서 사용자 추가, 퍼미션 추가.

        chat / chat

    RabbitMQChat/Program.cs

        using RabbitMQ.Client;
        using RabbitMQ.Client.Events;
        using System;
        using System.Text;
        using System.Threading.Tasks;

        namespace RabbitMQChat
        {
            class Program
            {
                static void Main(string[] args)
                {
                    var exchangeName = "chat";

                    // Create unique queue name for this instance
    +               var queueName = Guid.NewGuid().ToString();

                    // Connect to RabbitMQ
                    var factory = new ConnectionFactory();
                    factory.Uri = new Uri("amqp://chat:chat@localhost:5672");
    +               var connection = factory.CreateConnection();
    +               var channel = connection.CreateModel();

                    // Declare exchange and queue
    +               channel.ExchangeDeclare(exchangeName, ExchangeType.Fanout);

                    // durable = true: MQ restart 시 queue를 재생성.
                    // exclusive = true: 즉 이건 각 클라이언트 전용 queue임. 남과 공유하지 않음.
                    // autoDelete = true: 클라이언트가 사라지면 queue 삭제.
    +               channel.QueueDeclare(queueName, true, true, true);

                    // fanout exchange이므로 마지막 binding key는 사용하지 않는다 -> ""
    +               channel.QueueBind(queueName, exchangeName, "");

                    // Subscribe to incoming messages
    +               var consumer = new EventingBasicConsumer(channel);
    +               consumer.Received += (sender, eventArgs) =>
                    {
    +                   var text = Encoding.UTF8.GetString(eventArgs.Body.ToArray());
    +                   Console.WriteLine(text);
                    };

                    // autoAck = true
    +               channel.BasicConsume(queueName, true, consumer);

                    // Read input
    +               var input = Console.ReadLine();
    +               while (input != "")
                    {
                        // Remove line we just typed or we would see it twice
                        Console.SetCursorPosition(0, Console.CursorTop - 1);
                        ClearCurrentConsoleLine();

                        // Send outgoing message
                        var bytes = Encoding.UTF8.GetBytes(input);

                        // routingKey = ""
                        // properties = null
    +                   channel.BasicPublish(exchangeName, "", null, bytes);
    +                   input = Console.ReadLine();
                    }

                    // Disconnect
    +               channel.Close();
    +               connection.Close();
                }

                public static void ClearCurrentConsoleLine()
                {
                    int currentLineCursor = Console.CursorTop;
                    Console.SetCursorPosition(0, Console.CursorTop);
                    Console.Write(new string(' ', Console.WindowWidth));
                    Console.SetCursorPosition(0, currentLineCursor);
                }
            }
        }

2.9 challenge: chatrooms

2.10 solution: chatrooms

    클라이언트별로 exclusive, autodelete 큐를 1개씩 생성하고, binding key는 chatroom 이름을 사용.
    exchange 이름은 chat2로 변경.

    RabbitMQChat/Program.cs

        using RabbitMQ.Client;
        using RabbitMQ.Client.Events;
        using System;
        using System.Text;
        using System.Threading.Tasks;

        namespace RabbitMQChat
        {
            class Program
            {
                static void Main(string[] args)
                {
    +               Console.WriteLine("Please specify a chat room name:");
    +               var roomName = Console.ReadLine();

    +               var exchangeName = "chat2";

                    // Create unique queue name for this instance
                    var queueName = Guid.NewGuid().ToString();

                    // Connect to RabbitMQ
                    var factory = new ConnectionFactory();
                    factory.Uri = new Uri("amqp://chat:chat@localhost:5672");
                    var connection = factory.CreateConnection();
                    var channel = connection.CreateModel();

                    // Declare exchange and queue
    +               channel.ExchangeDeclare(exchangeName, ExchangeType.Direct);

                    // 클라이언트별로 exclusive, autodelete 큐를 1개씩 생성하고, binding key는 chatroom 이름을 사용.
                    channel.QueueDeclare(queueName, true, true, true);
    +               channel.QueueBind(queueName, exchangeName, roomName);

                    // Subscribe to incoming messages
                    var consumer = new EventingBasicConsumer(channel);
                    consumer.Received += (sender, eventArgs) =>
                    {
                        var text = Encoding.UTF8.GetString(eventArgs.Body.ToArray());
                        Console.WriteLine(text);
                    };

                    channel.BasicConsume(queueName, true, consumer);

                    // Read input
                    var input = Console.ReadLine();
                    while (input != "")
                    {
                        // Remove line we just typed or we would see it twice
                        Console.SetCursorPosition(0, Console.CursorTop - 1);
                        ClearCurrentConsoleLine();

                        // Send outgoing message
                        var bytes = Encoding.UTF8.GetBytes(input);
    +                   channel.BasicPublish(exchangeName, roomName, null, bytes);
                        input = Console.ReadLine();
                    }

                    // Disconnect
                    channel.Close();
                    connection.Close();
                }

                public static void ClearCurrentConsoleLine()
                {
                    int currentLineCursor = Console.CursorTop;
                    Console.SetCursorPosition(0, Console.CursorTop);
                    Console.Write(new string(' ', Console.WindowWidth));
                    Console.SetCursorPosition(0, currentLineCursor);
                }
            }
        }

2.11 quiz

3 advanced usage

3.1 set up and use authentication

    2 methods

        username / password
        x509 certificate

    auth backends

        rabbitmq
        ldap
        http server

    best practices

        create a user per application

            use mgmt ui (http://localhost:15672, guest / guest)

                mgmt ui
                    Admin tab
                        Add a user
                            webapp / webapp123
                        User details
                            click Set permission

        add an admin user

        remove guest:guest

3.2 authorize or block application actions

    https://www.rabbitmq.com/access-control.html

    Admin tab
        User details
            Permissions
                Current permissions
                    Virtual host    Configure regexp    Write regexp    Read regexp
                    /               .*                  .*              .*

            Topic permissions
                // routing key에 대한 regex 표현식을 지정함.

3.3 validate user ids

3.4 working with dead letter exchanges

3.5 tracing message contents for troubleshooting

3.6 challenge: show chat users

3.7 solution: show chat users

3.8 quiz
