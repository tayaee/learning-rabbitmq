https://www.linkedin.com/learning/learning-rabbitmq/what-s-new-in-this-update?u=61697657

0.1

0.2

1

1.1

1.2 the amqp protocol



1.7 how to install rabbitmq

    linux

    windows
        otp_win64_22.1.exe from http://erlang.org
            install as run as administrator

        rabbitmq-server-3.8.0.exe from rabbitmq.com
            install wit default  option (no need to run as administrator)

        start
            net start rabbitmq

        stop
            net stop rabbitmq

        management console

            cd c:\Program Files\RabbitMQ Server\rabbitmq_server-3.8.0\sbin> rabbitmq-plugins enable rabbitmq_management

            the console service is ready at http://localhost:15672

    mac

    cloud

        amazon

        azure

        cloud foundary

        gcp

        cloudamqp

            go to https://cloudamqp.com

            sign up

            Create a test instance using free plan: Littel Lemur (Free)

            https://customer.cloudamqp.com/instance/#

                Click RabbitMQ Manager

                RabbitMQ 3.8.5, Erlang 22.3.4.12

            https://api.cloudamqp.com/console/e00e2262-3108-49d6-a249-<removed>/details

                amqp url: amqps://wpnhglcx:HpBkG6LqUztKMk4zpDFoJBvO<removed>@hornet.rmq.cloudamqp.com/wpnhglcx

    docker

    kubrenetes

    chef

    puppet

1.8 quiz

durable queue

    mq 재시작 때 queue가 다시 만들어짐.
    그 안에 있던 메시지가 남아 있다는 뜻이 아님. message는 기본적으로 사라지고, 그거 남아 있게 하려면 message도 persistent해야 함.

2 basic usage

2.1 intro

2.2 publish to a rabbitmq exchange

    // fanout exchnage에 메시지 보내기.

    BookingController.cs

        using System;
        using System.Collections.Generic;
        using System.Linq;
    +   using System.Text;
        using System.Threading.Tasks;
        using Microsoft.AspNetCore.Http;
        using Microsoft.AspNetCore.Mvc;
    +   using RabbitMQ.Client;

        namespace ExploreCalifornia.WebApp.Controllers
        {
            [Route("api/[controller]")]
            [ApiController]
            public class BookingController : ControllerBase
            {
                [HttpPost]
                [Route("Book")]
                public IActionResult Book()
                {
                    var tourname = Request.Form["tourname"];
                    var name = Request.Form["name"];
                    var email= Request.Form["email"];
                    var needsTransport = Request.Form["transport"] == "on";

    +               var factory = new ConnectionFactory();
    +               factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
    +               var connection = factory.CreateConnection();
    +               var channel = connection.CreateModel();

                    // 3rd parammeter: true = durable exchange
    +               channel.ExchangeDeclare("webappExchange", ExchangeType.Fanout, true);

    +               var message = $"{tourname};{name};{email}";
                    // convert to byte as amqp is a binary protocol.
    +               var bytes = Encoding.UTF8.GetBytes(message);
                    // 2nd: "" = routing key
                    // 3rd: null = no properties
    +               channel.BasicPublish("webappExchange", "", null, bytes);

    +               channel.Close();
    +               connection.Close();

                    return Redirect($"/BookingConfirmed?tourname={tourname}&name={name}&email={email}");
                }

                [HttpPost]
                [Route("Cancel")]
                public IActionResult Cancel()
                {
                    var tourname = Request.Form["tourname"];
                    var name = Request.Form["name"];
                    var email = Request.Form["email"];
                    var cancelReason = Request.Form["reason"];

                    // Send cancel message here

                    return Redirect($"/BookingCanceled?tourname={tourname}&name={name}");
                }
            }
        }

2.3 consuming messages

    EmailService.cs

        using System;
    +   using System.Text;
    +   using RabbitMQ.Client;
    +   using RabbitMQ.Client.Events;

        namespace ExploreCalifornia.EmailService
        {
            class Program
            {
                static void Main(string[] args)
                {
    +               var factory = new ConnectionFactory();
    +               factory.Uri = new Uri("amqp://guest:guest@localhost:5672");
    +               var connection = factory.CreateConnection();
    +               var channel = connection.CreateModel();

                    // emailServiceQueue: queue name
                    // true: durable, MQ restart시 queue를 재생성.
                    // false: exclusive, false이므로 여러 connection이 queue에 접속할 수 있음. 메시지는 round robin으로 전달.
                    // false: autoDelete: false이므로 disconnect 해도 queue 삭제 안 됨.
    +               channel.QueueDeclare("emailServiceQueue", true, false, false);

                    // fanout 사용중이므로 마지말 파라미터 binding key는 사용하지 않는다.
    +               channel.QueueBind("emailServiceQueue", "webappExchange", "");

    +               var consumer = new EventingBasicConsumer(channel);
    +               consumer.Received += (sender, eventArgs) =>
    +               {
    +                   var msg = Encoding.UTF8.GetString(eventArgs.Body);
    +                   Console.WriteLine(msg);
    +               };

    +               channel.BasicConsume("emailServiceQueue", true, consumer);

    +               Console.ReadLine();

    +               channel.Close();
    +               connection.Close();
                }
            }
        }

2.4 filter messages with direct exchange

2.5 filter messages with topic exchanges

2.6 filter messages with headers

2.7 challenge: a simple chat appliction

2.8 solution

2.9 challenge: chatrooms

2.10 solution

2.11 quiz